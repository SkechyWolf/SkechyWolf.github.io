import { setupGround as e, updateGround as t } from "./ground.js"; import { setupTius as r, updateTius as o, getTiusRect as l, setTiusLose as s } from "./tius.js"; import { setupComputer as n, updateComputer as a, getComputerRect as c } from "./computer.js"; let WORLD_WIDTH = 100, WORLD_HEIGHT = 30, SPEED_SCALE_INCREASE = 1e-5, frameCount = 0, prevTime = 0, fps = 0, worldElem = document.querySelector("[data-world]"), scoreElem = document.querySelector("[data-score]"), startElem = document.querySelector("[data-start-screen]"), loseElem = document.querySelector("[data-lose-screen]"), BSODReveal = document.querySelector("[data-bsod-reveal]"), percentageElem = document.getElementById("percentage"); -1 === document.referrer.toLowerCase().indexOf("builds.html") && (alert("Wrong!"), document.body.classList.add("hide"), window.history.back()), setPixelToWorldScale(), window.addEventListener("resize", setPixelToWorldScale), document.addEventListener("keydown", handleStart, { once: !0 }); let lastTime, speedScale, score, prevScore, lostFocus = !1, percentage = 0, percentTimer; function update(e) { if (null == lastTime) { lastTime = e, window.requestAnimationFrame(update); return } let r = e - lastTime; if (t(r, speedScale), o(r, speedScale), a(r, speedScale), updateSpeedScale(r), updateScore(r), lostFocus || checkLose()) return handleLose(); let l = e - prevTime; frameCount++, l > 1e3 && (fps = Math.round(1e3 * frameCount / l), frameCount = 0, prevTime = e, document.querySelector(".fps").textContent = fps, fps < 30 ? document.querySelector(".fps").style.color = "red" : document.querySelector(".fps").style.color = "green"), lastTime = e, window.requestAnimationFrame(update) } function checkLose() { let e = l(); return c().some(t => isCollision(t, e)) } function isCollision(e, t) { return e.left < t.right && e.top < t.bottom && e.right > t.left && e.bottom > t.top } function updateSpeedScale(e) { speedScale > 5 || (speedScale += 1e-5 * e) } function updateScore(e) { score += .01 * e, scoreElem.textContent = `HI ${Math.floor(prevScore)} / ${Math.floor(score)}` } function handleLose() { s(lostFocus), score > prevScore && localStorage.setItem("score", Math.floor(score)), setTimeout(() => { if (document.addEventListener("keydown", handleStart, { once: !0 }), startElem.classList.remove("hide"), !lostFocus) { loseElem.classList.remove("hide"), BSODReveal.classList.remove("hide"); let e = ["ID10T_VIOLATION", "PEBKAC_ERROR", "SKILL_ISSUE", "EGOOVERLOAD", "JUMP_FAILURE", "JUMP_TIMEOUT"], t = e[Math.floor(Math.random() * e.length)]; document.getElementById("stopcode-msg").textContent = `Stop Code: ${t}`, percentTimer = setInterval(() => { percentage += 3 * Math.random(), percentage = Math.min(percentage, 100), percentageElem.textContent = `${Math.floor(percentage)}`, percentage >= 100 && (clearInterval(percentTimer), lostFocus || (handleStart(), document.removeEventListener("keydown", handleStart, { once: !0 }))) }, 200) } }, 200) } function handleStart(t) { if (console.log(t), "MediaPlayPause" === t.key || "MediaTrackPrevious" === t.key || "MediaTrackNext" === t.key || "AudioVolumeUp" === t.key || "AudioVolumeDown" === t.key || "VolumeMute" === t.key || "MediaStop" === t.key) return document.addEventListener("keydown", handleStart, { once: !0 }); clearInterval(percentTimer), percentage = 0, lastTime = null, speedScale = 1, score = 0, prevScore = localStorage.getItem("score") || 0, e(), r(), n(), startElem.classList.add("hide"), loseElem.classList.add("hide"), BSODReveal.classList.add("hide"), window.requestAnimationFrame(update) } function setPixelToWorldScale() { let e; e = window.innerWidth / window.innerHeight < 100 / 30 ? window.innerWidth / 100 : window.innerHeight / 30, worldElem.style.width = `${100 * e}px`, worldElem.style.height = `${30 * e}px` } window.addEventListener("blur", () => { lostFocus = !0 }), window.addEventListener("focus", () => { lostFocus = !1 });